#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 22, 2019 08:33:05 PM PDT  platform: Windows NT

import sys
import tkinter.messagebox

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    main_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None



class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Segoe UI} -size 10 -weight bold"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("717x597+891+179")
        top.title("New Toplevel")
        top.configure(background="#898989")

        def getUserSearchInput(): #takes in the Lobby search values
            input = self.lobbyEntry.get("1.0", 'end-1c') #str
            input = input.splitlines()
            names = []
            for line in input:
                names.append(line.lower().rstrip().lstrip())
            print(names)
            return names

        def addToList():
            inputName = self.ListEntry.get()
            listNames = getListNames()
            try:
                with open('mylist.txt', 'a') as f:
                    if inputName not in listNames:
                        writeName = '\n' + inputName
                        f.write(writeName.lower())
                    else:
                        tk.messagebox.showinfo("Oops!","Error: User already in list!")
            except Exception:
                tk.messagebox.showinfo("Oops!","Error: Your Int List is empty!")
            message = "Added " + inputName + " to the Int List"
            self.ListEntry.delete(0, 'end')
            if inputName not in listNames:
                tk.messagebox.showinfo("Added Entry!",message)

        def getListNames():
            names = []
            try:
                with open('mylist.txt', 'r') as f:
                    for line in f:
                        if line[0] != '\n' and '\t':
                            names.append(line.rstrip().lstrip())  # cut whitespace
            except Exception:
                tk.messagebox.showinfo("Oops!", "Error: Your Int List is empty!")
            return names

        def isUserInList():
            intListNames = getListNames()
            usersToInt = []         #users to int starts off as zero
            output = "Players in your list:\n"
            test = getUserSearchInput()

            for name in intListNames:
                if name in test and name not in usersToInt:
                    usersToInt.append(name)

            for name in usersToInt:
                output = output + name + "\n"

            if len(usersToInt) == 0 or len(intListNames)== 0:
                tkinter.messagebox.showinfo("Not in list!", "No one here is in your list.")
            else:
                #tkinter.messagebox.showinfo("Yay", output)
                setLobbyMembers(output)

        def updateList():
            with open('mylist.txt', 'a') as f:
                inputName = "og maco2"
                writeName = '\n' + inputName
                f.write(writeName)

        def setLobbyMembers(output):
            self.outputText.config(text=output)
            return

        def resetOutput():
            self.outputText.config(text='')
            self.lobbyEntry.delete('1.0','end')
            self.lobbyEntry.insert('1.0', '')

        self.searchButton = tk.Button(top)
        self.searchButton.place(relx=0.07, rely=0.369, height=33, width=243)
        self.searchButton.configure(activebackground="#ececec")
        self.searchButton.configure(activeforeground="#000000")
        self.searchButton.configure(background="#ffffcc")
        self.searchButton.configure(disabledforeground="#a3a3a3")
        self.searchButton.configure(foreground="#000000")
        self.searchButton.configure(highlightbackground="#d9d9d9")
        self.searchButton.configure(highlightcolor="black")
        self.searchButton.configure(pady="0")
        self.searchButton.configure(text='''Search Int List''')
        self.searchButton.configure(width=243)
        self.searchButton.configure(command=isUserInList)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg='#d220d8',fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.lobbyEntry = tk.Text(top)      #THIS IS WHERE YOU SEARCH LOBBY MEMBERS
        self.lobbyEntry.place(relx=0.07, rely=0.117, relheight=0.211
                              , relwidth=0.343)
        self.lobbyEntry.configure(width=246)
        self.lobbyEntry.configure(takefocus="")
        self.lobbyEntry.configure(cursor="ibeam")

        self.lobbyLabel = tk.Label(top)
        self.lobbyLabel.place(relx=0.07, rely=0.017, height=26, width=242)
        self.lobbyLabel.configure(background="#898989")
        self.lobbyLabel.configure(disabledforeground="#a3a3a3")
        self.lobbyLabel.configure(font=font10)
        self.lobbyLabel.configure(foreground="#ffffff")
        self.lobbyLabel.configure(text='''Enter Lobby Members Below''')
        self.lobbyLabel.configure(width=242)


        self.outputLabel = tk.Label(top)
        self.outputLabel.place(relx=0.572, rely=0.017, height=26, width=262)
        self.outputLabel.configure(activeforeground="#ffffff")
        self.outputLabel.configure(background="#898989")
        self.outputLabel.configure(disabledforeground="#a3a3a3")
        self.outputLabel.configure(font=font10)
        self.outputLabel.configure(foreground="#ffffff")
        self.outputLabel.configure(text='''These are on your list:''')
        self.outputLabel.configure(width=262)

        self.OnYourListFrame = tk.Frame(top)
        self.OnYourListFrame.place(relx=0.572, rely=0.117, relheight=0.209
                                   , relwidth=0.356)
        self.OnYourListFrame.configure(relief='groove')
        self.OnYourListFrame.configure(borderwidth="2")
        self.OnYourListFrame.configure(relief='groove')
        self.OnYourListFrame.configure(background="#ffffff")
        self.OnYourListFrame.configure(width=255)
        self.outputText = tk.Label(self.OnYourListFrame)
        self.outputText.grid()
        self.outputText.config(background="#ffffff")

        self.resetButton = tk.Button(top)
        self.resetButton.place(relx=0.572, rely=0.369, height=33, width=256)
        self.resetButton.configure(activebackground="#ececec")
        self.resetButton.configure(activeforeground="#000000")
        self.resetButton.configure(background="#ffffcc")
        self.resetButton.configure(disabledforeground="#a3a3a3")
        self.resetButton.configure(foreground="#000000")
        self.resetButton.configure(highlightbackground="#d9d9d9")
        self.resetButton.configure(highlightcolor="black")
        self.resetButton.configure(pady="0")
        self.resetButton.configure(text='''Reset''')
        self.resetButton.configure(width=256)
        self.resetButton.configure(command=resetOutput)


        self.enterNameButton = tk.Button(top)
        self.enterNameButton.place(relx=0.293, rely=0.804, height=33, width=306)
        self.enterNameButton.configure(activebackground="#ececec")
        self.enterNameButton.configure(activeforeground="#000000")
        self.enterNameButton.configure(background="#d9d9d9")
        self.enterNameButton.configure(disabledforeground="#a3a3a3")
        self.enterNameButton.configure(foreground="#000000")
        self.enterNameButton.configure(highlightbackground="#d9d9d9")
        self.enterNameButton.configure(highlightcolor="black")
        self.enterNameButton.configure(pady="0")
        self.enterNameButton.configure(text='''Enter Summoner Name''')
        self.enterNameButton.configure(width=306)
        self.enterNameButton.configure(command=addToList)



        self.entryLabel = tk.Label(top)
        self.entryLabel.place(relx=0.321, rely=0.62, height=26, width=242)
        self.entryLabel.configure(background="#898989")
        self.entryLabel.configure(disabledforeground="#a3a3a3")
        self.entryLabel.configure(font=font10)
        self.entryLabel.configure(foreground="#ffffff")
        self.entryLabel.configure(text='''Save Names Into Int List Here''')
        self.entryLabel.configure(width=242)

        self.ListEntry = ttk.Entry(top)                #THIS ONE IS FOR THE BOTTOM TEXT ENTRY
        self.ListEntry.place(relx=0.293, rely=0.704, relheight=0.06
                             , relwidth=0.427)
        self.ListEntry.configure(width=306)
        self.ListEntry.configure(takefocus="")
        self.ListEntry.configure(cursor="ibeam")

        self.paranthesisLabel = tk.Label(top)
        self.paranthesisLabel.place(relx=0.098, rely=0.067, height=16, width=202)
        self.paranthesisLabel.configure(background="#898989")
        self.paranthesisLabel.configure(disabledforeground="#a3a3a3")
        self.paranthesisLabel.configure(foreground="#ffffff")
        self.paranthesisLabel.configure(text='''(One per line, names only)''')
        self.paranthesisLabel.configure(width=202)

if __name__ == '__main__':
    vp_start_gui()





